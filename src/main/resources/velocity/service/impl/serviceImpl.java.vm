package ${package}.service.impl;


import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package}.entity.${ClassName};
import ${package}.mapper.${ClassName}Mapper;
import ${package}.service.${ClassName}Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${reference}.response.ResponseState;
import ${reference}.response.Result;
import ${reference}.util.WrapperUtils;
import io.jsonwebtoken.ExpiredJwtException;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.NotNull;
import java.util.List;
/**
 * <p>
 *  ${ClassName}服务实现类
 * </p>
 *
 * @author zzy
 * @since $date
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service {

    @Autowired
    private ${ClassName}Mapper ${classname}Mapper;

    /**
     * 分页查询
     * @param current：页码
     * @param size：每页条数
     * @param ${classname}：筛选条件
     * @return IPage<${ClassName}>
     */
    @Override
    public IPage<$ClassName> get${ClassName}Page(Integer current,Integer size,${ClassName} ${classname}){
        QueryWrapper<${ClassName}> queryWrapper = WrapperUtils.queryWrapper(${classname});
        Page<${ClassName}> ${classname}Page = new Page<>(current,size);
        IPage<${ClassName}> ${classname}IPage = ${classname}Mapper.selectPage(${classname}Page, queryWrapper);
        return ${classname}IPage;
    }

    /**
     * 查询所有
     * @param ${classname}：筛选条件
     * @return List<${ClassName}>
     */
    @Override
    public List<${ClassName}> getAll(${ClassName} ${classname}){
        QueryWrapper<${ClassName}> queryWrapper = WrapperUtils.queryWrapper(${classname});
        return ${classname}Mapper.selectList(queryWrapper);
    }

    /**
     * 通过id删除
     * @param id：${classname}Id
     * @return Result<Object>
     */
    @Override
    public Result<Object> deleteById(String id){
        ${ClassName} ${classname}=${classname}Mapper.selectById(id);
        if(${classname}==null){
            return Result.error(ResponseState.TARGET_NOT_EXIST.getValue(), ResponseState.TARGET_NOT_EXIST.getMessage());
        }
        ${classname}Mapper.deleteById(id);
        return Result.OK();
    }

    /**
    * 批量删除
    * @param ids：id列表
    * @return Result<Object>
    */
    @Override
    public Result<Object> batchDelete(List<String> ids){
        UpdateWrapper<${ClassName}> updateWrapper=new UpdateWrapper<>();
        updateWrapper.in("id",ids);
        ${classname}Mapper.delete(updateWrapper);
        return Result.OK();
    }
}